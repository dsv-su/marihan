From 1eeefe029067b93c07d7a7a0259b8d41d57c1e33 Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Thu, 13 Jun 2013 19:19:39 +0200
Subject: [PATCH 01/10] navigation

---
 mod/assign/lib.php | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/mod/assign/lib.php b/mod/assign/lib.php
index d79fbce..4229887 100644
--- a/mod/assign/lib.php
+++ b/mod/assign/lib.php
@@ -211,6 +211,40 @@ function assign_extend_settings_navigation(settings_navigation $settings, naviga
     if (!$course) {
         return;
     }
+    
+    // Give the assign feedback and submission plugins a chance to include some navigation into settings block if they want.
+    global $CFG;
+    $plugins = get_plugin_list('assignsubmission');
+
+    foreach ($plugins as $name => $plugin) {
+        $disabled = get_config('assignsubmission_' . $name, 'disabled');
+        if (!$disabled) {
+            $function = 'assignsubmission_' . $name . '_extend_settings_navigation';
+            $file = $CFG->dirroot . '/mod/assign/submission/' . $name . '/lib.php';
+            if (file_exists($file)) {
+                require_once($file);
+            }
+            if (function_exists($function)) {
+                $function($settings, $navref);
+            }
+        }
+    }
+
+    $plugins = get_plugin_list('assignfeedback');
+
+    foreach ($plugins as $name => $plugin) {
+        $disabled = get_config('assignfeedback_' . $name, 'disabled');
+        if (!$disabled) {
+            $function = 'assignfeedback_' . $name . '_extend_settings_navigation';
+            $file = $CFG->dirroot . '/mod/assign/feedback/' . $name . '/lib.php';
+            if (file_exists($file)) {
+                require_once($file);
+            }
+            if (function_exists($function)) {
+                $function($settings, $navref);
+            }
+        }
+    }
 
     // Link to gradebook.
     if (has_capability('gradereport/grader:view', $cm->context) &&
-- 
1.9.3 (Apple Git-50)


From e43442c7f480322be8a5ce8b9743d4ed1816de40 Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Sat, 8 Jun 2013 21:54:51 +0200
Subject: [PATCH 02/10] Hack for disabling buttons for reflection plugin

---
 mod/assign/renderer.php | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/mod/assign/renderer.php b/mod/assign/renderer.php
index 5a6ce92..559f7e5 100644
--- a/mod/assign/renderer.php
+++ b/mod/assign/renderer.php
@@ -687,6 +687,22 @@ class mod_assign_renderer extends plugin_renderer_base {
         $o .= html_writer::table($t);
         $o .= $this->output->box_end();
 
+
+        // Hack for Reflection submission plugin.
+        if ($status->submission) {
+            global $CFG, $DB;
+            require_once($CFG->dirroot.'/group/lib.php');
+            $waitingid = $DB->get_field('assign_plugin_config', 'value', array('assignment' => $status->submission->assignment,
+                'plugin' => 'reflection', 'name' => 'waitingid'));
+            if ($waitingid) {
+                if (groups_is_member($waitingid, $status->submission->userid)) {
+                    $status->cansubmit = false;
+                    $status->canedit = false;
+                }
+            }
+        }
+
+
         // Links.
         if ($status->view == assign_submission_status::STUDENT_VIEW) {
             if ($status->canedit) {
-- 
1.9.3 (Apple Git-50)


From d51f0a888c7cd12058eb9ec961a6bbd46cb6dc2b Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Thu, 26 Sep 2013 21:50:24 +0400
Subject: [PATCH 03/10] Adding a better interface for blog association,
 allowing users to change associations of a blog entry or to add an
 association ofter initial submission.

Conflicts:
	blog/edit.php
	blog/edit_form.php
---
 blog/edit.php      | 10 ++++++
 blog/edit_form.php | 96 ++++++++++++++++++++++++++++--------------------------
 blog/locallib.php  |  5 +++
 3 files changed, 65 insertions(+), 46 deletions(-)

diff --git a/blog/edit.php b/blog/edit.php
index c3052f7..7f1eb64 100644
--- a/blog/edit.php
+++ b/blog/edit.php
@@ -200,6 +200,16 @@ if ($blogeditform->is_cancelled()) {
     redirect($returnurl);
 
 } else if ($data = $blogeditform->get_data()) {
+    // Since a user can change the associated context: Update the return url with the current association.
+    if (!empty($data->modassoc)) {
+        $modulecontext = context::instance_by_id($data->modassoc);
+        $returnurl->param('modid', $modulecontext->instanceid);
+        $returnurl->remove_params('courseid');
+    } else if (!empty($data->courseassoc)) {
+        $coursecontext = context::instance_by_id($data->courseassoc);
+        $returnurl->param('courseid', $coursecontext->instanceid);
+        $returnurl->remove_params('modid');
+    }
 
     switch ($action) {
         case 'add':
diff --git a/blog/edit_form.php b/blog/edit_form.php
index 805bf79..c1bcda6 100644
--- a/blog/edit_form.php
+++ b/blog/edit_form.php
@@ -73,55 +73,40 @@ class blog_edit_form extends moodleform {
         $allmodnames = array();
 
         if (!empty($CFG->useblogassociations)) {
-            if ((!empty($entry->courseassoc) || (!empty($courseid) && empty($modid)))) {
-                if (!empty($courseid)) {
-                    $course = $DB->get_record('course', array('id' => $courseid));
-                    $context = context_course::instance($courseid);
-                    $a = new stdClass();
-                    $a->coursename = format_string($course->fullname, true, array('context' => $context));
-                    $contextid = $context->id;
-                } else {
-                    $context = context::instance_by_id($entry->courseassoc);
-                    $sql = 'SELECT fullname FROM {course} cr LEFT JOIN {context} ct ON ct.instanceid = cr.id WHERE ct.id = ?';
-                    $a = new stdClass();
-                    $a->coursename = $DB->get_field_sql($sql, array($entry->courseassoc));
-                    $contextid = $entry->courseassoc;
-                }
+            // Create a new array for all context where that the user is allowed to associate entries.
+            $permittedcontexts = array('' => '');
+
+            foreach (get_courses() as $course) {
+                $coursecontext = context_course::instance($course->id);
+                if (has_capability('moodle/blog:associatecourse', $coursecontext) && is_enrolled($coursecontext)) {
+                    $permittedcontexts[$coursecontext->id] = $course->fullname;
+                    foreach ($coursecontext->get_child_contexts() as $childcontext) {
+                        if ($childcontext->contextlevel == CONTEXT_MODULE
+                                && has_capability('moodle/blog:associatemodule', $childcontext)) {
+                            $cm = get_coursemodule_from_id(null, $childcontext->instanceid);
+                            $permittedcontexts[$childcontext->id] = '- '.$cm->name;
+                        }
+                    }
+                 }
+            }
 
+            // If there are any allowed contexts (more than the empty first option), show the select element and set the default option.
+            if (count($permittedcontexts) > 1) {
                 $mform->addElement('header', 'assochdr', get_string('associations', 'blog'));
-                $mform->addElement('advcheckbox',
-                                   'courseassoc',
-                                   get_string('associatewithcourse', 'blog', $a),
-                                   null,
-                                   null,
-                                   array(0, $contextid));
-                $mform->setDefault('courseassoc', $contextid);
-
-            } else if ((!empty($entry->modassoc) || !empty($modid))) {
-                if (!empty($modid)) {
-                    $mod = get_coursemodule_from_id(false, $modid);
-                    $a = new stdClass();
-                    $a->modtype = get_string('modulename', $mod->modname);
-                    $a->modname = $mod->name;
-                    $context = context_module::instance($modid);
-                } else {
-                    $context = context::instance_by_id($entry->modassoc);
-                    $cm = $DB->get_record('course_modules', array('id' => $context->instanceid));
-                    $a = new stdClass();
-                    $a->modtype = $DB->get_field('modules', 'name', array('id' => $cm->module));
-                    $a->modname = $DB->get_field($a->modtype, 'name', array('id' => $cm->instance));
-                    $modid = $context->instanceid;
+                $associationselect = $mform->addElement('select', 'assoc', get_string('association', 'blog'), $permittedcontexts);
+
+                if (!empty($entry->modassoc)) {
+                    $mform->setDefault('assoc', $entry->modassoc);
+                } else if (!empty($entry->courseassoc)) {
+                    $mform->setDefault('assoc', $entry->courseassoc);
+                } else if (!empty($modid)) {
+                    $modulecontext = context_module::instance($modid);
+                    $mform->setDefault('assoc', $modulecontext->id);
+                } else if (!empty($courseid)) {
+                    $coursecontext = context_course::instance($courseid);
+                    $mform->setDefault('assoc', $coursecontext->id);
                 }
-
-                $mform->addElement('header', 'assochdr', get_string('associations', 'blog'));
-                $mform->addElement('advcheckbox',
-                                   'modassoc',
-                                   get_string('associatewithmodule', 'blog', $a),
-                                   null,
-                                   null,
-                                   array(0, $context->id));
-                $mform->setDefault('modassoc', $context->id);
-            }
+           }
         }
 
         $this->add_action_buttons();
@@ -151,6 +136,25 @@ class blog_edit_form extends moodleform {
     public function validation($data, $files) {
         global $CFG, $DB, $USER;
 
+        // Before validation starts: Change the name of the association element to either modassoc or courseassoc, depending on 
+        // what kind of context is chosen.
+        // This is not strictly validation, but needs to be performed before validation therefore
+        // definition_before_data() can't be used.
+
+        $mform =& $this->_form;
+        if (isset($mform->_elementIndex['assoc'])) {
+            $associationselect = $mform->getElement('assoc');
+            $selectedvalue = $associationselect->getValue();
+            if ($selectedvalue[0] != '') {
+                $selectedcontext = context::instance_by_id($selectedvalue[0]);
+                if ($selectedcontext->contextlevel == CONTEXT_MODULE) {
+                    $associationselect->setName('modassoc');
+                } else if ($selectedcontext->contextlevel == CONTEXT_COURSE) {
+                    $associationselect->setName('courseassoc');
+                }
+            }
+        }
+
         $errors = array();
 
         // Validate course association.
diff --git a/blog/locallib.php b/blog/locallib.php
index 5df39ad..ad49fe3 100644
--- a/blog/locallib.php
+++ b/blog/locallib.php
@@ -290,6 +290,11 @@ class blog_entry implements renderable {
         $sitecontext = context_system::instance();
         $entry = $this;
 
+        // Unset the values for associations to avoid that an old association remains if the user changes the association from 
+        // module to course or vice versa.
+        unset($entry->modassoc);
+        unset($entry->courseassoc);
+
         $this->form = $form;
         foreach ($params as $var => $val) {
             $entry->$var = $val;
-- 
1.9.3 (Apple Git-50)


From a5c2ed8cdb5ca4c67669d5b13adb68a8ea65d115 Mon Sep 17 00:00:00 2001
From: Erik Lundberg <lundbergerik@gmail.com>
Date: Wed, 11 Jul 2012 14:50:57 +0200
Subject: [PATCH 04/10] Now the "Blog entries about course"-view will include
 nested entries; i. e. entries associated with modules that belongs to the
 course.

---
 blog/locallib.php | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/blog/locallib.php b/blog/locallib.php
index ad49fe3..a85f66a 100644
--- a/blog/locallib.php
+++ b/blog/locallib.php
@@ -926,7 +926,18 @@ class blog_filter_context extends blog_filter {
                     $context = context_course::instance($this->id);
                     $this->tables['ba'] = 'blog_association';
                     $this->conditions[] = 'p.id = ba.blogid';
-                    $this->conditions[] = 'ba.contextid = '.$context->id;
+                    
+                    // Create a new array that will contain the context id for the course and all nested modules.
+                    $ids = array();
+                    $ids[] = $context->id;
+
+                    foreach ($context->get_child_contexts() as $childcontextid => $contextobject) {
+                        if (get_class($contextobject) == 'context_module') {
+                            $ids[] = $childcontextid;
+                        }
+                    }
+                    $ids_string = implode(',', $ids);
+                    $this->conditions[] = 'ba.contextid IN ('.$ids_string.')';
                     break;
                 } else {
                     // We are dealing with the site course, do not break from the current case.
-- 
1.9.3 (Apple Git-50)


From e14ca3d419dd5e7e644e0e89e3ce7ee787d9e8fa Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Wed, 20 Nov 2013 17:06:49 +0400
Subject: [PATCH 05/10] Including all blog posts to view all posts link and
 fixing bug when no posts are seen from assignment group view

---
 blog/locallib.php | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/blog/locallib.php b/blog/locallib.php
index a85f66a..543fade 100644
--- a/blog/locallib.php
+++ b/blog/locallib.php
@@ -678,6 +678,10 @@ class blog_listing {
             $conditions[] = $permissionsql;  // Add permission constraints.
         }
 
+        if (!empty($this->filters['group']) && !empty($this->filters['module'])) {
+            $this->filters['group']->params[2] = $this->filters['module']->params[0];
+        }
+        
         foreach ($this->filters as $type => $blogfilter) {
             $conditions = array_merge($conditions, $blogfilter->conditions);
             $params = array_merge($params, $blogfilter->params);
@@ -1003,10 +1007,20 @@ class blog_filter_user extends blog_filter {
                 $coursecontext     = context_course::instance($DB->get_field('groups', 'courseid', array('id' => $this->id)));
                 $this->tables['ba'] = 'blog_association';
                 $this->conditions[] = 'gm.groupid = ?';
-                $this->conditions[] = 'ba.contextid = ?';
                 $this->conditions[] = 'ba.blogid = p.id';
                 $this->params[]     = $this->id;
-                $this->params[]     = $coursecontext->id;
+
+                // Create a new array that will contain the context id for the course and all nested modules.
+                $ids = array();
+                $ids[] = $coursecontext->id;
+
+                foreach ($coursecontext->get_child_contexts() as $childcontextid => $contextobject) {
+                    if (get_class($contextobject) == 'context_module') {
+                        $ids[] = $childcontextid;
+                    }
+                }
+                $ids_string = implode(',', $ids);
+                $this->conditions[] = 'ba.contextid IN ('.$ids_string.')';
             }
         }
 
-- 
1.9.3 (Apple Git-50)


From 01f0d59bd7c7f1403b72dcdb44e365feefa57135 Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Mon, 10 Mar 2014 09:46:23 +0100
Subject: [PATCH 06/10] Fixing leading zeros when autocreating groups

---
 group/autogroup.php      | 2 +-
 group/autogroup_form.php | 2 +-
 group/lib.php            | 9 +++++++--
 3 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/group/autogroup.php b/group/autogroup.php
index 8270ff3..ebec4c5 100644
--- a/group/autogroup.php
+++ b/group/autogroup.php
@@ -128,7 +128,7 @@ if ($editform->is_cancelled()) {
     // allocate the users - all groups equal count first
     for ($i=0; $i<$numgrps; $i++) {
         $groups[$i] = array();
-        $groups[$i]['name']    = groups_parse_name(trim($data->namingscheme), $i);
+        $groups[$i]['name']    = groups_parse_name(trim($data->namingscheme), $i, $data->number);
         $groups[$i]['members'] = array();
         if ($data->allocateby == 'no') {
             continue; // do not allocate users
diff --git a/group/autogroup_form.php b/group/autogroup_form.php
index df43b4f..f436e10 100644
--- a/group/autogroup_form.php
+++ b/group/autogroup_form.php
@@ -54,7 +54,7 @@ class autogroup_form extends moodleform {
         $mform->setType('namingscheme', PARAM_TEXT);
         // There must not be duplicate group names in course.
         $template = get_string('grouptemplate', 'group');
-        $gname = groups_parse_name($template, 0);
+        $gname = groups_parse_name($template, 0, 0);
         if (!groups_get_group_by_name($COURSE->id, $gname)) {
             $mform->setDefault('namingscheme', $template);
         }
diff --git a/group/lib.php b/group/lib.php
index e1645b9..2ebc006 100644
--- a/group/lib.php
+++ b/group/lib.php
@@ -795,7 +795,7 @@ function groups_get_potential_members($courseid, $roleid = null, $source = null,
  * @param int $groupnumber The number of the group to be used in the parsed format string
  * @return string the parsed format string
  */
-function groups_parse_name($format, $groupnumber) {
+function groups_parse_name($format, $groupnumber, $count = 0) {
     if (strstr($format, '@') !== false) { // Convert $groupnumber to a character series
         $letter = 'A';
         for($i=0; $i<$groupnumber; $i++) {
@@ -803,7 +803,12 @@ function groups_parse_name($format, $groupnumber) {
         }
         $str = str_replace('@', $letter, $format);
     } else {
-        $str = str_replace('#', $groupnumber+1, $format);
+        if ($count > 9) {
+            $num_length = strlen((string)$count);
+            $str = str_replace('#', str_pad($groupnumber+1, $num_length, '0', STR_PAD_LEFT), $format);
+        } else {
+            $str = str_replace('#', $groupnumber+1, $format);
+        }
     }
     return($str);
 }
-- 
1.9.3 (Apple Git-50)


From 1003409101cc7bd2cb3f37714b37f400c3026900 Mon Sep 17 00:00:00 2001
From: Simon Jarbrant <simonjarbrant@gmail.com>
Date: Mon, 10 Mar 2014 20:18:11 +0100
Subject: [PATCH 07/10] MDL-36151 assign: add option to download selected
 assign submissions

---
 mod/assign/gradingbatchoperationsform.php |  1 +
 mod/assign/lang/en/assign.php             |  2 ++
 mod/assign/locallib.php                   | 37 +++++++++++++++++++++++++++----
 mod/assign/module.js                      |  2 +-
 4 files changed, 37 insertions(+), 5 deletions(-)

diff --git a/mod/assign/gradingbatchoperationsform.php b/mod/assign/gradingbatchoperationsform.php
index 98e1681..5b3bda3 100644
--- a/mod/assign/gradingbatchoperationsform.php
+++ b/mod/assign/gradingbatchoperationsform.php
@@ -46,6 +46,7 @@ class mod_assign_grading_batch_operations_form extends moodleform {
         $options = array();
         $options['lock'] = get_string('locksubmissions', 'assign');
         $options['unlock'] = get_string('unlocksubmissions', 'assign');
+        $options['download'] = get_string('downloadsubmissions', 'assign');
         if ($instance['submissiondrafts']) {
             $options['reverttodraft'] = get_string('reverttodraft', 'assign');
         }
diff --git a/mod/assign/lang/en/assign.php b/mod/assign/lang/en/assign.php
index 6652b18..9d031fb 100644
--- a/mod/assign/lang/en/assign.php
+++ b/mod/assign/lang/en/assign.php
@@ -86,6 +86,7 @@ $string['attemptreopenmethod_untilpass'] = 'Automatically until pass';
 $string['availability'] = 'Availability';
 $string['backtoassignment'] = 'Back to assignment';
 $string['batchoperationsdescription'] = 'With selected...';
+$string['batchoperationconfirmdownload'] = 'Download selected submissions?';
 $string['batchoperationconfirmlock'] = 'Lock all selected submissions?';
 $string['batchoperationconfirmgrantextension'] = 'Grant an extension to all selected submissions?';
 $string['batchoperationconfirmunlock'] = 'Unlock all selected submissions?';
@@ -129,6 +130,7 @@ $string['deleteallsubmissions'] = 'Delete all submissions';
 $string['description'] = 'Description';
 $string['downloadall'] = 'Download all submissions';
 $string['download all submissions'] = 'Download all submissions in a zip file.';
+$string['downloadsubmissions'] = 'Download submissions';
 $string['duedate'] = 'Due date';
 $string['duedate_help'] = 'This is when the assignment is due. Submissions will still be allowed after this date but any assignments submitted after this date are marked as late. To prevent submissions after a certain date - set the assignment cut off date.';
 $string['duedateno'] = 'No due date';
diff --git a/mod/assign/locallib.php b/mod/assign/locallib.php
index 16eae89..847b8cc 100644
--- a/mod/assign/locallib.php
+++ b/mod/assign/locallib.php
@@ -527,6 +527,8 @@ class assign {
             $o .= $this->view_grading_page();
         } else if ($action == 'downloadall') {
             $o .= $this->download_submissions();
+        } else if ($action == 'downloadselectedsubmissions') {
+            $o .= $this->download_selected_submissions($mform);
         } else if ($action == 'submit') {
             $o .= $this->check_submit_for_grading($mform);
         } else if ($action == 'grantextension') {
@@ -2502,9 +2504,10 @@ class assign {
     /**
      * Download a zip file of all assignment submissions.
      *
+     * @param array with $students objects
      * @return string - If an error occurs, this will contain the error page.
      */
-    protected function download_submissions() {
+    protected function download_submissions($students=null) {
         global $CFG, $DB;
 
         // More efficient to load this here.
@@ -2512,9 +2515,11 @@ class assign {
 
         $this->require_view_grades();
 
-        // Load all users with submit.
-        $students = get_enrolled_users($this->context, "mod/assign:submit", null, 'u.*', null, null, null,
-                        $this->show_only_active_users());
+        if ($students == null) {
+            // Load all users with submit.
+            $students = get_enrolled_users($this->context, "mod/assign:submit", null, 'u.*', null, null, null,
+                            $this->show_only_active_users());
+        }
 
         // Build a list of files to zip.
         $filesforzipping = array();
@@ -2606,6 +2611,28 @@ class assign {
     }
 
     /**
+     * Extracts selected users from the $mform and sends the user objects
+     * to the download_submissions function, which it then returns the result of
+     *
+     * @param moodleform $mform - Used for getting the selected users
+     * @return string - See return value of download_submissions
+     */
+    protected function download_selected_submissions($mform) {
+        global $DB;
+
+        // Get the list of users.
+        $data = $mform->get_data();
+        $users = $data->selectedusers;
+        $userlist = explode(',', $users);
+
+        // Load selected users
+        $sql = 'SELECT * FROM {user} WHERE id IN (' . implode(',', $userlist) . ')';
+        $students = $DB->get_records_sql($sql);
+
+        return $this->download_submissions($students);
+    }
+
+    /**
      * Util function to add a message to the log.
      *
      * @deprecated since 2.7 - Use new events system instead.
@@ -3561,6 +3588,8 @@ class assign {
                 return 'viewbatchsetmarkingworkflowstate';
             } else if ($data->operation == 'setmarkingallocation') {
                 return 'viewbatchmarkingallocation';
+            } else if ($data->operation == 'download') {
+                return 'downloadselectedsubmissions';
             } else if (strpos($data->operation, $prefix) === 0) {
                 $tail = substr($data->operation, strlen($prefix));
                 list($plugintype, $action) = explode('_', $tail, 2);
diff --git a/mod/assign/module.js b/mod/assign/module.js
index a2ab7ed..5e82029 100644
--- a/mod/assign/module.js
+++ b/mod/assign/module.js
@@ -90,7 +90,7 @@ M.mod_assign.init_grading_table = function(Y) {
                         action = pluginaction.substr(plugin.length + 1);
                         confirmmessage = eval('M.str.assignfeedback_' + plugin + '.batchoperationconfirm' + action);
                     } else {
-                        confirmmessage = eval('M.str.assign.batchoperationconfirm' + operation.get('value'));
+                        confirmmessage = eval('M.str.assign.batchoperationconfirm' + action);
                     }
                     if (!confirm(confirmmessage)) {
                         e.preventDefault();
-- 
1.9.3 (Apple Git-50)


From 0bb00af8e71d65ade9ff30e385bac7ea245d4be6 Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Thu, 6 Mar 2014 13:07:22 +0400
Subject: [PATCH 08/10] MDL-44481 assign: add sorting of assign submissions by
 a group name

---
 mod/assign/gradingtable.php | 24 +++++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/mod/assign/gradingtable.php b/mod/assign/gradingtable.php
index 08552f2..3f9816f 100644
--- a/mod/assign/gradingtable.php
+++ b/mod/assign/gradingtable.php
@@ -160,6 +160,27 @@ class assign_grading_table extends table_sql implements renderable {
                             g.attemptnumber = s.attemptnumber
                          LEFT JOIN {assign_user_flags} uf ON u.id = uf.userid AND uf.assignment = :assignmentid3';
 
+        if ($this->assignment->get_instance()->teamsubmission) {
+            $groupingid = $assignment->get_instance()->teamsubmissiongroupingid;
+            if ($groupingid) {
+                $query = 'SELECT g.id FROM {groups} g JOIN {groupings_groups} gg ON gg.groupid = g.id WHERE gg.groupingid = '.$groupingid;
+                $teamsubmissiongroupinggroups = $DB->get_fieldset_sql($query);
+                $teamsubmissiongroupinggroups = '(' . join(',', $teamsubmissiongroupinggroups) . ')';
+                $groupingmodifier = ' AND gr.id IN '.$teamsubmissiongroupinggroups;
+            } else {
+                $groupingmodifier = '';
+            }
+
+            $usergroups = 'SELECT gms.userid, CASE WHEN COUNT(gr.id)=1 THEN gr.name ELSE "Default" END as team
+                            FROM {groups_members} gms 
+                            LEFT JOIN {groups} gr ON gms.groupid = gr.id 
+                            WHERE gr.courseid = '.$assignment->get_instance()->course.$groupingmodifier.' 
+                            GROUP BY gms.userid';
+
+            $fields .= ', CASE WHEN ugs.team is NULL THEN "Default" ELSE ugs.team END as team ';
+            $from .= ' LEFT JOIN ( ' . $usergroups . ' ) ugs ON u.id = ugs.userid';
+        }
+        
         $userparams = array();
         $userindex = 0;
 
@@ -398,7 +419,8 @@ class assign_grading_table extends table_sql implements renderable {
         $this->no_sorting('outcomes');
 
         if ($assignment->get_instance()->teamsubmission) {
-            $this->no_sorting('team');
+            $this->sortable('team');
+            $this->no_sorting('teamstatus');
         }
 
         $plugincolumnindex = 0;
-- 
1.9.3 (Apple Git-50)


From e4ab634c0afa18f5b3fe0a3f0a363aec46d814dd Mon Sep 17 00:00:00 2001
From: Dan Wheeler - Colgate <DWheeler@Colgate.Edu>
Date: Thu, 26 Jun 2014 13:23:01 -0700
Subject: [PATCH 09/10] MDL-44481 assign: Added checking for no groups in
 selected Grouping

---
 mod/assign/gradingtable.php | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/mod/assign/gradingtable.php b/mod/assign/gradingtable.php
index 3f9816f..d39cc80 100644
--- a/mod/assign/gradingtable.php
+++ b/mod/assign/gradingtable.php
@@ -165,8 +165,12 @@ class assign_grading_table extends table_sql implements renderable {
             if ($groupingid) {
                 $query = 'SELECT g.id FROM {groups} g JOIN {groupings_groups} gg ON gg.groupid = g.id WHERE gg.groupingid = '.$groupingid;
                 $teamsubmissiongroupinggroups = $DB->get_fieldset_sql($query);
-                $teamsubmissiongroupinggroups = '(' . join(',', $teamsubmissiongroupinggroups) . ')';
-                $groupingmodifier = ' AND gr.id IN '.$teamsubmissiongroupinggroups;
+				if ($teamsubmissiongroupinggroups) {
+                   $teamsubmissiongroupinggroups = '(' . join(',', $teamsubmissiongroupinggroups) . ')';
+                   $groupingmodifier = ' AND gr.id IN '.$teamsubmissiongroupinggroups;
+				} else {
+				  $groupingmodifier = '';
+				}
             } else {
                 $groupingmodifier = '';
             }
-- 
1.9.3 (Apple Git-50)


From 7520eab4b0a712133ca8b989e4db8e062c84c3f3 Mon Sep 17 00:00:00 2001
From: Pavel Sokolov <pavel.m.sokolov@gmail.com>
Date: Thu, 11 Dec 2014 12:07:53 +0300
Subject: [PATCH 10/10] Rework of login page

---
 login/index.php       |  1 +
 login/index_form.html | 37 ++++++++++++++++++++++++++++++++-----
 2 files changed, 33 insertions(+), 5 deletions(-)

diff --git a/login/index.php b/login/index.php
index 587eb0e..c8bb96c 100644
--- a/login/index.php
+++ b/login/index.php
@@ -44,6 +44,7 @@ if ($cancel) {
 
 //HTTPS is required in this page when $CFG->loginhttps enabled
 $PAGE->https_required();
+$PAGE->requires->jquery();
 
 $context = context_system::instance();
 $PAGE->set_url("$CFG->httpswwwroot/login/index.php");
diff --git a/login/index_form.html b/login/index_form.html
index 7f212c3..2e9d45d 100644
--- a/login/index_form.html
+++ b/login/index_form.html
@@ -1,9 +1,10 @@
 <?php
-if ($show_instructions) {
+//if ($show_instructions) {
     $columns = 'twocolumns';
-} else {
+//} else {
     $columns = 'onecolumn';
-}
+//}
+
 
 if (!empty($CFG->loginpasswordautocomplete)) {
     $autocomplete = 'autocomplete="off"';
@@ -15,15 +16,41 @@ if (empty($CFG->authloginviaemail)) {
 } else {
     $strusername = get_string('usernameemail');
 }
+
 ?>
+
+<script type="text/javascript" >
+$(document).ready(function()
+{
+  $(".subcontent").hide();
+
+  $(".expand").click(function() {
+    var X = $(this).attr('id');
+    if (X == 1) {
+      $(this).parent().find(".subcontent").hide();
+      $(this).find("h2").attr('class', 'collapsed');
+      $(this).attr('id', '0'); 
+    } else {
+      $(".subcontent").hide();
+      $(".subcontent").parent().find("a").attr('id', '0'); 
+      $(this).find("h2").attr('class', 'collapsed');
+      $(this).parent().find(".subcontent").show();
+      $(this).find("h2").attr('class', 'expanded');
+      $(this).attr('id', '1');
+    }
+  })
+})
+</script>
+
 <div class="loginbox clearfix <?php echo $columns ?>">
   <div class="loginpanel">
+  <a class="directlink" href = "https://<?php echo($CFG->chat_serverhost) ?>/auth/shibboleth"><div><h2 class ="collapsed">Login with your DSV or University account</h2></div></a>
 <?php
   if (($CFG->registerauth == 'email') || !empty($CFG->registerauth)) { ?>
       <div class="skiplinks"><a class="skip" href="signup.php"><?php print_string("tocreatenewaccount"); ?></a></div>
 <?php
   } ?>
-    <h2><?php print_string("login") ?></h2>
+    <a class="expand"><div><h2 class ="collapsed">Login with another account</h2></div></a>
       <div class="subcontent loginsub">
         <?php
           if (!empty($errormsg)) {
@@ -81,7 +108,7 @@ if (empty($CFG->authloginviaemail)) {
      </div>
 <?php if ($show_instructions) { ?>
     <div class="signuppanel">
-      <h2><?php print_string("firsttime") ?></h2>
+      <a class="expand"><div><h2 class ="collapsed">Create an account</h2></div></a>
       <div class="subcontent">
 <?php     if (is_enabled_auth('none')) { // instructions override the rest for security reasons
               print_string("loginstepsnone");
-- 
1.9.3 (Apple Git-50)

